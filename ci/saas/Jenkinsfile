library 'jenkins-shared-lib@main'

pipeline {
    agent any
    options {
        disableConcurrentBuilds abortPrevious: true
    }
    stages {
        stage('Cancel previous builds') {
            agent {
                label 'master'
            }
            steps {
                cancelPreviousBuilds()
            }
        }

        stage('Clean workspace before building Docker image') {
            agent {
                label 'slave'
            }
            steps {
                sh 'sudo rm -rf ./*'
            }
        }

        stage('Build and Push git branch to SWR'){
            agent {
                label 'slave'
            }
            when {
                anyOf {
                    branch 'fftest-*';
                    branch 'PROD-*'
                }
            }
            steps{
              withCredentials([string(credentialsId: 'metatrust-scantist-webhook', variable: 'WEBHOOK_URL')]) {
                sh 'echo "$BRANCH_NAME" > version'
                sh 'cat version'
                dockerBuildPush('HWC', 'scantist-images/repofi', 'Dockerfile', '--no-cache --build-arg NEXT_PUBLIC_CHAIN_ID=11155111 --build-arg NEXT_PUBLIC_CONTRACT_LAUNCHPAD_ADDRESS=0x2A7A16616602Ef92b38CaA39103D004080B64429 --build-arg NEXT_PUBLIC_REOWN_PROJECT_ID=d198cf7bba856bb5f9a7ec73cb03235e', '.', "${env.BRANCH_NAME}")
                pushHangoutsNotify("Build image for repofi on branch ${env.BRANCH_NAME}")
                sh """
                curl -X POST \
                    -H "Content-Type: application/json" \
                    -d '{"msg_type": "text","content": {"text": "Push branch: ${env.BRANCH_NAME} to SWR, commit: ${env.GIT_COMMIT}, refer to JenkinsJob ${env.JOB_NAME}-${env.BUILD_NUMBER} details here: ${env.BUILD_URL}"}}' \
                    $WEBHOOK_URL
                    """
              }
            }
        }

        stage('Build and Push git tag to SWR'){
            agent {
                label 'slave'
            }
            when {
                tag 'v*'
            }
            steps{
              withCredentials([string(credentialsId: 'metatrust-scantist-webhook', variable: 'WEBHOOK_URL')]) {
                // build for stable tag
                dockerBuildPush('HWC', 'scantist-images/repofi', 'Dockerfile', '--no-cache', '.', 'stable')
                // build for version tag
                dockerBuildPush('HWC', 'scantist-images/repofi', 'Dockerfile', '', '.', 'saas-prod')
                pushHangoutsNotify("Pushed to SWR: Tag ${env.TAG_NAME}")
                sh """
                curl -X POST \
                    -H "Content-Type: application/json" \
                    -d '{"msg_type": "text","content": {"text": "Push tag: ${env.TAG_NAME} to SWR, commit: ${env.GIT_COMMIT}, refer to JenkinsJob ${env.JOB_NAME}-${env.BUILD_NUMBER} details here: ${env.BUILD_URL}"}}' \
                    $WEBHOOK_URL
                    """
              }

            }
        }

        stage('Clean workspace after building Docker image') {
            agent {
                label 'slave'
            }
            steps {
                sh 'sudo rm -rf ./*'
            }
        }
    }
    post {
        failure {
            // Use the credentials stored in Jenkins (secret text in this example)
            withCredentials([string(credentialsId: 'metatrust-scantist-webhook', variable: 'WEBHOOK_URL')]) {
                // Send a webhook message using curl
                sh """
                curl -X POST \
                    -H "Content-Type: application/json" \
                    -d '{"msg_type": "text","content": {"text": "JenkinsJob FAILED! Refer to JenkinsJob ${env.JOB_NAME}-${env.BUILD_NUMBER} details here: ${env.BUILD_URL}"}}' \
                    $WEBHOOK_URL
                    """
            }
          }
        }
}
