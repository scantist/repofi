import "~/styles/globals.css"

import { GeistSans } from "geist/font/sans"
import { type Metadata } from "next"
import { QueryClientReactProvider } from "~/components/query-client/query-client-provider"
import { TRPCReactProvider } from "~/trpc/react"
import { cookieToInitialState } from "@wagmi/core"
import { auth } from "~/server/auth"
import { wagmiConfig } from "~/components/auth/config"
import { headers } from "next/headers"
import AuthProvider from "~/components/auth/auth-provider"
import Link from "next/link"
import LogoRepoIcon from "~/components/icons/logo-repo-icon"
import Nav from "~/components/nav"
import WalletButton from "~/components/auth/wallet-button"
import { Space_Grotesk, Space_Mono } from "next/font/google"
import ToTop from "~/components/common/to-top"
import { Badge } from "~/components/ui/badge"
import React from "react"

const sans = Space_Grotesk({
  subsets: ["latin"],
  variable: "--font-sans"
})
const mono = Space_Mono({
  subsets: ["latin"],
  weight: ["400", "700"],
  variable: "--font-mono"
})

const socialMedias = [
  {
    title: "Twitter / X",
    type: "x",
    href: "#"
  },
  {
    title: "Discord",
    type: "discord",
    href: "#"
  },
  {
    title: "Telegram",
    type: "telegram",
    href: "#"
  }
]

export const metadata: Metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }]
}

export default async function RootLayout({
  children
}: Readonly<{ children: React.ReactNode }>) {
  const session = await auth()
  const wagmiState = cookieToInitialState(
    wagmiConfig,
    (await headers()).get("cookie"),
  )
  return (
    <html lang="en" className={`dark ${GeistSans.variable}`}>
      <body className={`font-sans ${sans.variable} ${mono.variable} dark`}>
        <QueryClientReactProvider>
          <TRPCReactProvider>
            <AuthProvider session={session} wagmiState={wagmiState}>
              <div className={"relative flex min-h-screen w-full flex-col bg"}>
                <header className="fixed top-0 z-30 mx-auto flex h-16 w-full items-center justify-between px-4">
                  <div className="mx-auto flex w-full max-w-7xl items-center justify-between p-4 pr-0">
                    <Link href="/">
                      <LogoRepoIcon className="text-primary size-12" />
                    </Link>
                    <div className="">
                      <Nav />
                    </div>
                    <div className="hidden items-center gap-4 md:flex">
                      <WalletButton />
                    </div>
                  </div>
                  <div
                    className="from-background pointer-events-none absolute inset-0 -z-10 h-[200%] bg-black/80 bg-gradient-to-b to-transparent backdrop-blur"
                    style={{
                      maskImage:
                        "linear-gradient(to bottom, black 0% 50%, transparent 50% 100%)"
                    }}
                  ></div>
                </header>
                <main className="relative flex grow flex-col overflow-clip">
                  {children}
                </main>
                <footer className="h-24 backdrop-blur bg-black">
                  <div className="mx-auto flex h-full w-full max-w-7xl items-center justify-between gap-0 px-8 md:px-4">
                    <div className="flex items-center gap-6">
                      <ToTop className="group">
                        <LogoRepoIcon className="h-8 text-primary transition-all group-hover:-rotate-45 group-hover:text-foreground" />
                      </ToTop>

                      <Badge
                        variant="outline"
                        className="font-mono text-xs font-normal text-muted-foreground"
                      >
                        dev
                      </Badge>
                    </div>
                    <div className="flex items-center gap-4 sm:gap-8">
                      {socialMedias.map((item, idx) => (
                        <div
                          key={idx}
                          className="group flex cursor-pointer items-center gap-2"
                        >
                          <Link
                            href={item.href}
                            target="_blank"
                            className="hidden group-hover:text-primary sm:block"
                          >
                            {item.title}
                          </Link>
                        </div>
                      ))}
                      <Link
                        href={""}
                        target="_blank"
                        className="flex items-center gap-2 hover:text-primary"
                      >
                        <p className="hidden sm:block">AgentLayer</p>
                      </Link>
                    </div>
                  </div>
                </footer>
              </div>
            </AuthProvider>
          </TRPCReactProvider>
        </QueryClientReactProvider>
      </body>
    </html>
  )
}
