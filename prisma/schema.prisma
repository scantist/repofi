// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl", "debian-openssl-3.0.x"]
}

generator zod {
  provider       = "zod-prisma-types"
  output         = "../src/lib/zod"
  // createRelationValuesTypes = true
  addIncludeType = true
  addSelectType  = true
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ApiKey {
  key         String    @id @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  userAddress String?   @map("user_address") @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  expiredAt   DateTime? @map("expired_at")

  @@unique([name, userAddress])
  @@map("t_api_key")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  address       String        @id @db.VarChar(255)
  name          String?       @db.VarChar(255)
  email         String?       @unique @db.VarChar(255)
  referralCode  String        @unique @map("referral_code")
  role          UserRole      @default(USER) @map("role")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  invitedBy     String[]      @default([]) @map("invited_by")
  stars         DaoStar[]
  daos          Dao[]
  contributions Contributor[]

  @@map("t_user")
}

enum DaoType {
  CODE
  MODEL
  DATASET
}

enum DaoStatus {
  INACTIVE
  LAUNCHING
  LAUNCHED
}

enum DaoPlatform {
  GITHUB
  GITLAB
}

enum DaoContentType {
  LIST_ROW
}

model DaoStar {
  daoId       String @map("dao_id") @db.VarChar(255)
  userAddress String @map("user_address") @db.VarChar(255)

  dao  Dao  @relation(fields: [daoId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userAddress], references: [address], onDelete: Cascade)

  @@id([daoId, userAddress])
  @@map("t_dao_star")
}

model Dao {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  name         String      @unique @db.VarChar(255)
  url          String      @unique @db.VarChar(255)
  ticker       String      @unique @db.VarChar(255)
  type         DaoType     @map("type")
  description  String      @db.Text
  avatar       String      @db.VarChar(255)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  createdBy    String      @map("created_by") @db.VarChar(255)
  tokenId      BigInt      @unique @map("token_id") @db.BigInt
  links        Json        @default("[]")
  status       DaoStatus   @default(LAUNCHING) @map("status")
  platform     DaoPlatform @default(GITHUB) @map("platform")
  marketCapUsd Decimal     @default(0) @map("market_cap_usd") @db.Decimal(50, 18)
  priceUsd     Decimal     @default(0) @map("price_usd") @db.Decimal(50, 18)

  creator      User           @relation(fields: [createdBy], references: [address])
  tokenInfo    DaoTokenInfo   @relation(fields: [tokenId], references: [tokenId], onUpdate: Cascade, onDelete: Cascade)
  messages     ForumMessage[]
  stars        DaoStar[]
  contributors Contributor[]
  contents     DaoContent[]

  @@map("t_dao")
}

model DaoContent {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  daoId     String         @map("dao_id")
  sort      Int
  title     String         @db.VarChar(255)
  type      DaoContentType @default(LIST_ROW) @map("type")
  data      Json           @db.JsonB
  dao       Dao            @relation(fields: [daoId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")

  @@unique([daoId, sort])
  @@map("t_dao_content")
}

model DaoTokenHolder {
  userAddress String  @map("user_address") @db.VarChar(255)
  tokenId     BigInt  @map("token_id") @db.BigInt
  balance     Decimal @map("balance") @db.Decimal(50, 18)

  tokenInfo DaoTokenInfo @relation(fields: [tokenId], references: [tokenId], onUpdate: Cascade, onDelete: Cascade)

  @@id([userAddress, tokenId])
  @@index([tokenId])
  @@index([userAddress])
  @@map("t_dao_token_holder")
}

model DaoTokenInfo {
  tokenId           BigInt    @id @map("token_id") @db.BigInt
  tokenAddress      String?   @map("token_address") @db.VarChar(255)
  name              String    @map("name") @db.VarChar(255)
  ticker            String    @map("ticker") @db.VarChar(255)
  creator           String    @map("creator") @db.VarChar(255)
  isGraduated       Boolean   @default(false) @map("is_graduated")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")
  liquidity         Decimal?  @map("liquidity") @db.Decimal(50, 18)
  price             Decimal?  @map("price") @db.Decimal(50, 18)
  marketCap         Decimal?  @map("market_cap") @db.Decimal(50, 18)
  totalSupply       Decimal?  @map("total_supply") @db.Decimal(78, 0)
  raisedAssetAmount Decimal?  @map("raised_asset_amount") @db.Decimal(78, 0)
  salesRatio        Decimal?  @map("sales_ratio") @db.Decimal(5, 2)
  reservedRatio     Decimal?  @map("reserved_ratio") @db.Decimal(5, 2)
  unlockRatio       Decimal?  @map("unlock_ratio") @db.Decimal(5, 2)
  holderCount       Int       @default(0) @map("holder_count")
  assetTokenAddress String?   @map("asset_token_address") @db.VarChar(255)
  graduatedAt       DateTime? @map("graduated_at")
  uniswapV3Pair     String?   @map("uniswap_v3_pair") @db.VarChar(255)

  dao     Dao?
  holders DaoTokenHolder[]

  @@map("t_dao_token_info")
}

model AssetToken {
  address   String  @id @map("address") @db.VarChar(255)
  name      String  @map("name") @db.VarChar(255)
  symbol    String  @map("symbol") @db.VarChar(255)
  decimals  Int     @map("decimals")
  logoUrl   String  @map("logo_url") @db.VarChar(255)
  priceUsd  Decimal @default(0) @map("price_usd") @db.Decimal(50, 18)
  launchFee Decimal @default(0) @map("launch_fee") @db.Decimal(78, 0)
  isAllowed Boolean @default(false) @map("is_allowed")
  isNative  Boolean @default(false) @map("is_native")
  isValid   Boolean @default(false) @map("is_valid")

  @@map("t_asset_token")
}

model ForumMessage {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  daoId     String    @map("dao_id")
  message   String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by") @db.VarChar(255)
  deletedAt DateTime? @map("deleted_at")

  replyToMessage String? @map("reply_to_message") @db.VarChar(255)
  replyToUser    String? @map("reply_to_user") @db.VarChar(255)
  rootMessageId  String? @map("root_message_id") @db.VarChar(255)

  dao Dao @relation(fields: [daoId], references: [id], onDelete: Cascade)

  @@index([rootMessageId])
  @@index([createdAt])
  @@map("t_forum_message")
}

model Contributor {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(255)
  daoId              String               @map("dao_id")
  userAddress        String?              @map("user_address")
  isValid            Boolean              @default(false) @map("is_valid")
  userPlatformId     String               @map("user_platform_id") @db.VarChar(255)
  userPlatformName   String               @map("user_platform_name") @db.VarChar(255)
  userPlatformAvatar String               @map("user_platform_avatar") @db.VarChar(255)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt @map("updated_at")
  dao                Dao                  @relation(fields: [daoId], references: [id], onDelete: Cascade)
  user               User?                @relation(fields: [userAddress], references: [address], onDelete: Cascade)
  histories          ContributorHistory[]
  snapshotValue      Decimal              @default(0) @db.Decimal(50, 18)

  @@map("t_contributor")
}

model ContributorHistory {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(255)
  tag           String      @db.VarChar(255)
  value         Decimal     @default(0) @db.Decimal(50, 18)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  contributor   Contributor @relation(fields: [contributorId], references: [id])
  contributorId String      @map("contributor_id") @db.VarChar(255)

  @@map("t_contributor_history")
}

//------------------------------indexer tables-------------------------------------
model EvtTxnLog {
  blockNumber BigInt  @map("block_number")
  txnIndex    BigInt  @map("txn_index")
  logIndex    BigInt  @map("log_index")
  blockTime   BigInt  @map("block_time")
  txnHash     String  @map("txn_hash") @db.Char(66)
  address     String  @db.Char(42)
  topic0      String  @map("topic_0") @db.VarChar(255)
  topic1      String? @map("topic_1") @db.VarChar(255)
  topic2      String? @map("topic_2") @db.VarChar(255)
  topic3      String? @map("topic_3") @db.VarChar(255)
  data        String? @db.Text

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_txn_log")
}

model EvtTokenLog {
  blockNumber  BigInt  @map("block_number")
  txnIndex     BigInt  @map("txn_index")
  logIndex     BigInt  @map("log_index")
  blockTime    BigInt  @map("block_time")
  txnHash      String  @map("txn_hash") @db.Char(66)
  tokenId      BigInt  @map("token_id")
  assetAddress String  @map("asset_address") @db.Char(42)
  initPrice    Decimal @map("init_price") @db.Decimal(50, 18)
  userAddress  String  @map("user_address") @db.Char(42)

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_token_log")
}

model EvtGraduatedLog {
  blockNumber  BigInt @map("block_number")
  txnIndex     BigInt @map("txn_index")
  logIndex     BigInt @map("log_index")
  blockTime    BigInt @map("block_time")
  txnHash      String @map("txn_hash") @db.Char(66)
  tokenId      BigInt @map("token_id")
  tokenAddress String @map("token_address") @db.Char(42)
  uniswapPool  String @map("uniswap_pool") @db.Char(42)

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_graduated_log")
}

model EvtTokenLockLog {
  blockNumber  BigInt  @map("block_number")
  txnIndex     BigInt  @map("txn_index")
  logIndex     BigInt  @map("log_index")
  blockTime    BigInt  @map("block_time")
  txnHash      String  @map("txn_hash") @db.Char(66)
  tokenAddress String  @map("token_address") @db.Char(42)
  unlockRatio  Decimal @map("unlock_ratio") @db.Decimal(40, 0)
  lockPeriod   BigInt  @map("lock_period")
  lockStart    BigInt  @map("lock_start")

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_token_lock_log")
}

model EvtTradeLog {
  blockNumber  BigInt  @map("block_number")
  txnIndex     BigInt  @map("txn_index")
  logIndex     BigInt  @map("log_index")
  blockTime    BigInt  @map("block_time")
  txnHash      String  @map("txn_hash") @db.Char(66)
  tokenId      BigInt  @map("token_id")
  userAddress  String  @map("user_address") @db.Char(42)
  assetAddress String  @map("asset_address") @db.Char(42)
  tradeType    Int     @map("trade_type") // 0-buy;1-sell
  amountIn     Decimal @map("amount_in") @db.Decimal(40, 18)
  amountOut    Decimal @map("amount_out") @db.Decimal(40, 18)
  price        Decimal @db.Decimal(40, 18)

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_trade_log")
}

model EvtAssetLog {
  blockNumber  BigInt   @map("block_number")
  txnIndex     BigInt   @map("txn_index")
  logIndex     BigInt   @map("log_index")
  blockTime    BigInt   @map("block_time")
  txnHash      String   @map("txn_hash") @db.Char(66)
  assetAddress String   @map("asset_address") @db.Char(42)
  decimals     Int
  isAllowed    Boolean  @default(false) @map("is_allowed")
  launchFee    Decimal? @map("launch_fee") @db.Decimal(40, 0)

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_asset_log")
}

model EvtAssetFeeLog {
  blockNumber  BigInt  @map("block_number")
  txnIndex     BigInt  @map("txn_index")
  logIndex     BigInt  @map("log_index")
  blockTime    BigInt  @map("block_time")
  txnHash      String  @map("txn_hash") @db.Char(66)
  assetAddress String  @map("asset_address") @db.Char(42)
  oldLaunchFee Decimal @map("old_launch_fee") @db.Decimal(40, 0)
  newLaunchFee Decimal @map("new_launch_fee") @db.Decimal(40, 0)

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_asset_fee_log")
}

model EvtContributionStartLog {
  blockNumber BigInt @map("block_number")
  txnIndex    BigInt @map("txn_index")
  logIndex    BigInt @map("log_index")
  blockTime   BigInt @map("block_time")
  txnHash     String @map("txn_hash") @db.Char(66)
  tokenId     BigInt @map("token_id")
  cycleId     BigInt @map("cycle_id")

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_contribution_start_log")
}

model EvtContributionUpdateLog {
  blockNumber   BigInt  @map("block_number")
  txnIndex      BigInt  @map("txn_index")
  logIndex      BigInt  @map("log_index")
  blockTime     BigInt  @map("block_time")
  txnHash       String  @map("txn_hash") @db.Char(66)
  tokenId       BigInt  @map("token_id")
  cycleId       BigInt  @map("cycle_id")
  contributor   String  @db.Char(42)
  contributorId String  @map("contributor_id") @db.VarChar(255)
  score         Decimal @db.Decimal(40, 0)

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_contribution_update_log")
}

model EvtClaimLog {
  blockNumber  BigInt  @map("block_number")
  txnIndex     BigInt  @map("txn_index")
  logIndex     BigInt  @map("log_index")
  blockTime    BigInt  @map("block_time")
  txnHash      String  @map("txn_hash") @db.Char(66)
  tokenAddress String  @map("token_address") @db.Char(42)
  userAddress  String  @map("user_address") @db.Char(42)
  amount       Decimal @db.Decimal(50, 18)
  claimType    Int     @map("claim_type") // 0-Instant;1-Linear;2-Finished

  @@id([blockNumber, txnIndex, logIndex])
  @@map("t_evt_claim_log")
}

model KLine5m {
  tokenId BigInt  @map("token_id")
  openTs  BigInt  @map("open_ts")
  closeTs BigInt  @map("close_ts")
  open    Decimal @db.Decimal(50, 18)
  high    Decimal @db.Decimal(50, 18)
  low     Decimal @db.Decimal(50, 18)
  close   Decimal @db.Decimal(50, 18)
  volume  Decimal @db.Decimal(50, 18)
  amount  Decimal @db.Decimal(50, 18)
  txnNum  BigInt  @map("txn_num")

  @@id([tokenId, openTs])
  @@map("t_kline_5m")
}

model KLine1m {
  tokenId BigInt  @map("token_id")
  openTs  BigInt  @map("open_ts")
  closeTs BigInt  @map("close_ts")
  open    Decimal @db.Decimal(50, 18)
  high    Decimal @db.Decimal(50, 18)
  low     Decimal @db.Decimal(50, 18)
  close   Decimal @db.Decimal(50, 18)
  volume  Decimal @db.Decimal(50, 18)
  amount  Decimal @db.Decimal(50, 18)
  txnNum  BigInt  @map("txn_num")

  @@id([tokenId, openTs])
  @@map("t_kline_1m")
}

model ContributionInfo {
  tokenId BigInt @map("token_id")
  cycleId BigInt @map("cycle_id")
  startTs BigInt @map("start_ts")

  @@id([tokenId, cycleId])
  @@map("t_contribution_info")
}

model ContributionDetail {
  tokenId       BigInt  @map("token_id")
  cycleId       BigInt  @map("cycle_id")
  contributor   String  @db.Char(42)
  contributorId String  @map("contributor_id") @db.VarChar(255)
  score         Decimal @db.Decimal(40, 0)
  updateTs      BigInt  @map("update_ts")

  @@id([tokenId, cycleId, contributor])
  @@map("t_contribution_detail")
}

model UserClaimHistory {
  userAddress  String  @map("user_address") @db.Char(42)
  tokenAddress String  @map("token_address") @db.Char(42)
  claimType    Int     @map("claim_type") // 0-Instant;1-Linear;2-Finished
  claimAmount  Decimal @map("claim_amount") @db.Decimal(50, 18)
  claimTime    BigInt  @map("claim_time")

  @@id([userAddress, tokenAddress])
  @@map("t_user_claim_history")
}
