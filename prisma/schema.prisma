// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl", "debian-openssl-3.0.x"]
}

generator zod {
  provider       = "zod-prisma-types"
  output         = "../src/lib/zod"
  // createRelationValuesTypes = true
  addIncludeType = true
  addSelectType  = true
}

datasource db {
  provider          = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ApiKey {
  key         String    @id @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  userAddress String?   @map("user_address") @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at")
  expiredAt   DateTime? @map("expired_at")

  @@unique([name, userAddress])
  @@map("t_api_key")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  address       String    @id @db.VarChar(255)
  name          String?   @db.VarChar(255)
  email         String?   @unique @db.VarChar(255)
  referralCode  String    @unique @map("referral_code")
  role          UserRole  @default(USER) @map("role")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  invitedBy     String[]  @default([]) @map("invited_by")
  stars         DaoStar[]
  daos          Dao[]
  contributions POC[]

  @@map("t_user")
}

enum DaoType {
  CODE
  MODEL
  DATASET
}

enum DaoStatus {
  INACTIVE
  LAUNCHING
  LAUNCHED
}

enum DaoPlatform {
  GITHUB
  GITLAB
}

enum DaoContentType {
  LIST_ROW
}

model DaoStar {
  daoId       String @map("dao_id") @db.VarChar(255)
  userAddress String @map("user_address") @db.VarChar(255)

  dao  Dao  @relation(fields: [daoId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userAddress], references: [address], onDelete: Cascade)

  @@id([daoId, userAddress])
  @@map("t_dao_star")
}

model Dao {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  name         String      @unique @db.VarChar(255)
  url          String      @unique @db.VarChar(255)
  ticker       String      @unique @db.VarChar(255)
  type         DaoType     @map("type")
  description  String      @db.Text
  avatar       String      @db.VarChar(255)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  createdBy    String      @map("created_by") @db.VarChar(255)
  tokenId      BigInt      @unique @map("token_id") @db.BigInt
  links        Json        @default("[]")
  status       DaoStatus   @default(LAUNCHING) @map("status")
  platform     DaoPlatform @default(GITHUB) @map("platform")
  marketCapUsd Decimal     @default(0) @map("market_cap_usd") @db.Decimal(50, 18)
  priceUsd     Decimal     @default(0) @map("price_usd") @db.Decimal(50, 18)

  creator   User           @relation(fields: [createdBy], references: [address])
  tokenInfo DaoTokenInfo   @relation(fields: [tokenId], references: [tokenId], onUpdate: Cascade, onDelete: Cascade)
  messages  ForumMessage[]
  stars     DaoStar[]
  pocs      POC[]
  contents  DaoContent[]

  @@map("t_dao")
}

model DaoContent {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  daoId     String         @map("dao_id")
  sort      Int
  title     String         @db.VarChar(255)
  type      DaoContentType @default(LIST_ROW) @map("type")
  data      Json           @db.JsonB
  dao       Dao            @relation(fields: [daoId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")

  @@unique([daoId, sort])
  @@map("t_dao_content")
}

model DaoTokenHolder {
  holderAddress String  @map("holder_address") @db.VarChar(255)
  tokenId       BigInt  @map("token_id") @db.BigInt
  tokenAmount   Decimal @map("token_amount") @db.Decimal(50, 18)

  tokenInfo DaoTokenInfo @relation(fields: [tokenId], references: [tokenId], onUpdate: Cascade, onDelete: Cascade)

  @@id([holderAddress, tokenId])
  @@index([tokenId])
  @@index([holderAddress])
  @@map("t_dao_token_holder")
}

model DaoTokenInfo {
  tokenId           BigInt  @id @map("token_id") @db.BigInt
  tokenAddress      String? @map("token_address") @db.VarChar(255)
  name              String  @map("name") @db.VarChar(255)
  ticker            String  @map("ticker") @db.VarChar(255)
  creator           String  @map("creator") @db.VarChar(255)
  createdAt         BigInt  @default(0) @map("created_at")
  marketCap         Decimal @default(0) @map("market_cap") @db.Decimal(50, 18)
  totalSupply       Decimal @default(0) @map("total_supply") @db.Decimal(50, 18)
  holderCount       Int     @default(0) @map("holder_count")
  assetTokenAddress String  @default("") @map("asset_token_address") @db.VarChar(255)
  tradingonuniswap  Boolean @default(false) @map("trading_on_uniswap")
  uniswapV3Pair     String? @map("uniswap_v3_pair") @db.VarChar(255)

  dao     Dao?
  holders DaoTokenHolder[]

  @@map("t_dao_token_info")
}

model AssetToken {
  chainId  Int     @map("chain_id")
  address  String  @map("address") @db.VarChar(255)
  name     String  @map("name") @db.VarChar(255)
  symbol   String  @map("symbol") @db.VarChar(255)
  decimals Int     @map("decimals")
  logoUrl  String  @map("logo_url") @db.VarChar(255)
  priceUsd Decimal @default(0) @map("price_usd") @db.Decimal(50, 18)
  isNative Boolean @default(false) @map("is_native")

  @@id([chainId, address])
  @@index([address])
  @@map("t_asset_token")
}

model ForumMessage {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @map("id")
  daoId     String    @map("dao_id")
  message   String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by") @db.VarChar(255)
  deletedAt DateTime? @map("deleted_at")

  replyToMessage String? @map("reply_to_message") @db.VarChar(255)
  replyToUser    String? @map("reply_to_user") @db.VarChar(255)
  rootMessageId  String? @map("root_message_id") @db.VarChar(255)

  dao Dao @relation(fields: [daoId], references: [id], onDelete: Cascade)

  @@index([rootMessageId])
  @@index([createdAt])
  @@map("t_forum_message")
}

model POC {
  id                 String       @id @db.VarChar(255)
  daoId              String       @map("dao_id")
  userAddress        String?      @map("user_address")
  isValid            Boolean      @default(false) @map("is_valid")
  userPlatformId     String       @map("user_platform_id") @db.VarChar(255)
  userPlatformName   String       @map("user_platform_name") @db.VarChar(255)
  userPlatformUrl    String       @map("user_platform_url") @db.VarChar(255)
  userPlatformAvatar String       @map("user_platform_avatar") @db.VarChar(255)
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @default(now()) @updatedAt @map("updated_at")
  dao                Dao          @relation(fields: [daoId], references: [id], onDelete: Cascade)
  user               User?        @relation(fields: [userAddress], references: [address], onDelete: Cascade)
  histories          POCHistory[]
  snapshotValue      Decimal      @default(0) @db.Decimal(50, 18)

  @@map("t_poc")
}

model POCHistory {
  id        String   @id @db.VarChar(255)
  tag       String   @db.VarChar(255)
  value     Decimal  @default(0) @db.Decimal(50, 18)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  poc       POC      @relation(fields: [pocId], references: [id])
  pocId     String   @map("poc_id") @db.VarChar(255)

  @@map("t_poc_history")
}
